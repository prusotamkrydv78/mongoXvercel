<%- include('./partials/header') %>

<main class="new-post-page">
  <section class="new-post-header">
    <div class="container">
      <div class="row">
        <div class="col-lg-8 offset-lg-2">
          <h1 class="page-title">Create New Post</h1>
          <p class="page-description">Share your thoughts, ideas, and stories with the world</p>
        </div>
      </div>
    </div>
  </section>

  <section class="new-post-content">
    <div class="container">
      <div class="row">
        <div class="col-lg-8 offset-lg-2">
          <div class="card">
            <div class="card-body">
              <form action="/post/new-post" method="POST" enctype="multipart/form-data" id="newPostForm">
                <div class="mb-4">
                  <label for="postTitle" class="form-label">Post Title</label>
                  <input type="text" class="form-control form-control-lg" id="postTitle" name="title" placeholder="Enter a captivating title" required>
                </div>
               <!-- <div class="mb-4">
                  <label for="postExcerpt" class="form-label">Excerpt</label>
                  <textarea class="form-control" id="postExcerpt" name="excerpt" rows="2" placeholder="A brief summary of your post"></textarea>
                  <small class="text-muted">This will be displayed in post previews. If left empty, the beginning of your post will be used.</small>
                </div> -->

                <div class="mb-4">
                  <label for="postImages" class="form-label">Post Images</label>
                  <div class="post-images-upload">
                    <div class="post-images-preview" id="imagesPreviewContainer">
                      <div class="empty-state">
                        <i class="fas fa-images"></i>
                        <span>No images selected</span>
                      </div>
                    </div>
                    <div class="post-images-actions mt-3">
                      <label for="imagesInput" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-upload me-2"></i>Upload Images
                      </label>
                      <input type="file" class="d-none" id="imagesInput" name="image" multiple accept="image/*">
                      <button type="button" class="btn btn-outline-info btn-sm" id="fetchRandomImages">
                        <i class="fas fa-random me-2"></i>Add Random
                      </button>
                      <button type="button" class="btn btn-outline-secondary btn-sm" id="removeAllImages" disabled>
                        <i class="fas fa-times me-2"></i>Remove All
                      </button>
                    </div>
                    <div id="randomImagesOptions" class="random-images-options mt-2 d-none">
                      <div class="d-flex flex-wrap align-items-center">
                        <div class="input-group me-3 mb-2" style="width: auto;">
                          <span class="input-group-text">Images</span>
                          <input type="number" class="form-control" id="randomImagesCount" min="1" max="10" value="3" style="width: 70px;">
                          <button class="btn btn-sm btn-primary" type="button" id="confirmRandomImages">Fetch</button>
                          <button class="btn btn-sm btn-outline-secondary" type="button" id="cancelRandomImages">
                            <i class="fas fa-times"></i>
                          </button>
                        </div>

                        <div class="mb-2">
                          <div class="form-check form-check-inline mb-0">
                            <input class="form-check-input" type="radio" name="randomImageType" id="randomNature" value="nature" checked>
                            <label class="form-check-label" for="randomNature">Nature</label>
                          </div>
                          <div class="form-check form-check-inline mb-0">
                            <input class="form-check-input" type="radio" name="randomImageType" id="randomArchitecture" value="architecture">
                            <label class="form-check-label" for="randomArchitecture">Architecture</label>
                          </div>
                          <div class="form-check form-check-inline mb-0">
                            <input class="form-check-input" type="radio" name="randomImageType" id="randomPeople" value="people">
                            <label class="form-check-label" for="randomPeople">People</label>
                          </div>
                          <div class="form-check form-check-inline mb-0">
                            <input class="form-check-input" type="radio" name="randomImageType" id="randomTechnology" value="technology">
                            <label class="form-check-label" for="randomTechnology">Technology</label>
                          </div>
                        </div>
                      </div>
                    </div>
                    <small class="text-muted mt-2">You can select multiple images. The first image will be used as the cover image.</small>
                  </div>
                </div>

                <!-- <div class="row mb-4">
                  <div class="col-md-6">
                    <label for="postCategory" class="form-label">Category</label>
                    <select class="form-select" id="postCategory" name="category" required>
                      <option value="" selected disabled>Select a category</option>
                      <option value="technology">Technology</option>
                      <option value="lifestyle">Lifestyle</option>
                      <option value="travel">Travel</option>
                      <option value="food">Food</option>
                      <option value="health">Health</option>
                      <option value="business">Business</option>
                      <option value="education">Education</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                  <div class="col-md-6">
                    <label for="postTags" class="form-label">Tags</label>
                    <input type="text" class="form-control" id="postTags" name="tags" placeholder="Enter tags separated by commas">
                    <small class="text-muted">E.g., coding, web development, javascript</small>
                  </div>
                </div>  -->

                <div class="mb-4">
                  <label for="postContent" class="form-label">Content</label>
                  <textarea class="form-control" id="postContent" name="content" rows="12" placeholder="Write your post content here..." required></textarea>
                </div>

                <!-- <div class="row mb-4">
                  <div class="col-md-6">
                    <label for="postStatus" class="form-label">Status</label>
                    <select class="form-select" id="postStatus" name="status">
                      <option value="published">Published</option>
                      <option value="draft">Save as Draft</option>
                    </select>
                  </div>
                  <div class="col-md-6">
                    <label for="postVisibility" class="form-label">Visibility</label>
                    <select class="form-select" id="postVisibility" name="visibility">
                      <option value="public">Public</option>
                      <option value="private">Private</option>
                    </select>
                  </div>
                </div>

                <div class="mb-4">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="allowComments" name="allowComments" checked>
                    <label class="form-check-label" for="allowComments">
                      Allow comments on this post
                    </label>
                  </div>
                </div> -->

                <div class="d-flex justify-content-between">
                  <button type="button" class="btn btn-outline-secondary" onclick="window.location.href='/posts'">
                    <i class="fas fa-arrow-left me-2"></i>Cancel
                  </button>
                  <div>
                    <button type="button" class="btn btn-outline-primary me-2" id="previewPostBtn">
                      <i class="fas fa-eye me-2"></i>Preview
                    </button>
                    <button type="submit" class="btn btn-primary">
                      <i class="fas fa-paper-plane me-2"></i>Publish Post
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>

<!-- Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="previewModalLabel">Post Preview</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="post-preview">
          <h1 id="previewTitle" class="preview-title"></h1>
          <div class="preview-meta">
            <span class="preview-author">
              <img src="<%= user.profileImage %>" alt="<%= user.username %>" class="preview-author-avatar">
              <%= user.username %>
            </span>
            <span class="preview-date">
              <i class="far fa-calendar-alt"></i> <%= new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }) %>
            </span>
            <span class="preview-category" id="previewCategory">
              <i class="fas fa-folder"></i> <span id="previewCategoryText"></span>
            </span>
          </div>
          <div id="previewCoverImage" class="preview-cover-image d-none">
            <img src="" alt="Cover Image" id="previewCoverImageSrc">
          </div>
          <div id="previewContent" class="preview-content"></div>
          <div id="previewTags" class="preview-tags"></div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript for Image Upload Preview -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Multiple Images Preview
    const imagesInput = document.getElementById('imagesInput');
    const imagesPreviewContainer = document.getElementById('imagesPreviewContainer');
    const removeAllImagesBtn = document.getElementById('removeAllImages');
    const fetchRandomImagesBtn = document.getElementById('fetchRandomImages');
    const randomImagesOptions = document.getElementById('randomImagesOptions');
    const confirmRandomImagesBtn = document.getElementById('confirmRandomImages');
    const cancelRandomImagesBtn = document.getElementById('cancelRandomImages');
    const randomImagesCount = document.getElementById('randomImagesCount');
    let selectedFiles = [];
    let isLoadingRandomImages = false;

    if (imagesInput) {
      imagesInput.addEventListener('change', function() {
        if (this.files && this.files.length > 0) {
          // Store the selected files
          selectedFiles = Array.from(this.files);

          // Clear the preview container
          imagesPreviewContainer.innerHTML = '';

          // Create a grid for image previews
          const previewGrid = document.createElement('div');
          previewGrid.className = 'images-preview-grid';
          imagesPreviewContainer.appendChild(previewGrid);

          // Enable the remove all button
          removeAllImagesBtn.disabled = false;

          // Process each file
          selectedFiles.forEach((file, index) => {
            const reader = new FileReader();

            reader.onload = function(e) {
              // Create preview item
              const previewItem = document.createElement('div');
              previewItem.className = 'preview-item';
              previewItem.dataset.index = index;

              // Create image element
              const img = document.createElement('img');
              img.src = e.target.result;
              img.alt = `Image ${index + 1}`;
              previewItem.appendChild(img);

              // Create remove button
              const removeBtn = document.createElement('button');
              removeBtn.className = 'remove-image-btn';
              removeBtn.innerHTML = '<i class="fas fa-times"></i>';
              removeBtn.addEventListener('click', function(e) {
                e.preventDefault();
                removeImage(index);
              });
              previewItem.appendChild(removeBtn);

              // Add cover badge to first image
              if (index === 0) {
                const coverBadge = document.createElement('div');
                coverBadge.className = 'cover-badge';
                coverBadge.textContent = 'Cover';
                previewItem.appendChild(coverBadge);
              }

              // Add to grid
              previewGrid.appendChild(previewItem);
            };

            reader.readAsDataURL(file);
          });
        }
      });
    }

    // Function to remove a specific image
    function removeImage(index) {
      // Remove the file from the array
      selectedFiles.splice(index, 1);

      // If no files left, show empty state
      if (selectedFiles.length === 0) {
        imagesPreviewContainer.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-images"></i>
            <span>No images selected</span>
          </div>
        `;
        removeAllImagesBtn.disabled = true;
        imagesInput.value = '';
        return;
      }

      // Recreate the DataTransfer object and FileList
      const dataTransfer = new DataTransfer();
      selectedFiles.forEach(file => {
        dataTransfer.items.add(file);
      });

      // Update the file input
      imagesInput.files = dataTransfer.files;

      // Trigger change event to refresh previews
      const event = new Event('change', { bubbles: true });
      imagesInput.dispatchEvent(event);
    }

    // Random Images Functionality
    if (fetchRandomImagesBtn) {
      fetchRandomImagesBtn.addEventListener('click', function() {
        randomImagesOptions.classList.toggle('d-none');
      });
    }

    if (cancelRandomImagesBtn) {
      cancelRandomImagesBtn.addEventListener('click', function() {
        randomImagesOptions.classList.add('d-none');
      });
    }

    if (confirmRandomImagesBtn) {
      confirmRandomImagesBtn.addEventListener('click', async function() {
        if (isLoadingRandomImages) return;

        const count = parseInt(randomImagesCount.value) || 3;
        const type = document.querySelector('input[name="randomImageType"]:checked').value || 'nature';

        // Show loading state
        isLoadingRandomImages = true;
        confirmRandomImagesBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        confirmRandomImagesBtn.disabled = true;

        try {
          // Fetch random images from Unsplash API
          const images = await fetchRandomImagesFromAPI(count, type);

          if (images && images.length > 0) {
            // Convert images to files and add to selection
            await addRandomImagesToSelection(images);

            // Hide options panel
            randomImagesOptions.classList.add('d-none');
          } else {
            alert('Failed to fetch random images. Please try again.');
          }
        } catch (error) {
          console.error('Error fetching random images:', error);
          alert('An error occurred while fetching random images. Please try again.');
        } finally {
          // Reset loading state
          isLoadingRandomImages = false;
          confirmRandomImagesBtn.innerHTML = 'Fetch';
          confirmRandomImagesBtn.disabled = false;
        }
      });
    }

    // Function to fetch random images from API
    async function fetchRandomImagesFromAPI(count, type) {
      // Using Unsplash Source API for random images
      const images = [];

      for (let i = 0; i < count; i++) {
        // Generate a random ID to ensure we get different images
        const randomId = Math.floor(Math.random() * 1000);
        const width = 800 + Math.floor(Math.random() * 400); // Random width between 800-1200
        const height = 600 + Math.floor(Math.random() * 300); // Random height between 600-900

        // Create image URL from Unsplash Source
        const imageUrl = `https://source.unsplash.com/random/${width}x${height}?${type}&sig=${randomId}`;
        images.push(imageUrl);
      }

      return images;
    }

    // Function to convert URLs to files and add to selection
    async function addRandomImagesToSelection(imageUrls) {
      const newFiles = [];

      // Create a loading indicator in the preview container
      if (selectedFiles.length === 0) {
        imagesPreviewContainer.innerHTML = `
          <div class="loading-indicator">
            <i class="fas fa-spinner fa-spin"></i>
            <span>Loading random images...</span>
          </div>
        `;
      }

      // Fetch each image and convert to file
      for (const url of imageUrls) {
        try {
          const response = await fetch(url);
          const blob = await response.blob();

          // Create a file from the blob
          const filename = `random-image-${Date.now()}-${Math.floor(Math.random() * 1000)}.jpg`;
          const file = new File([blob], filename, { type: 'image/jpeg' });

          newFiles.push(file);
        } catch (error) {
          console.error('Error converting image URL to file:', error);
        }
      }

      if (newFiles.length > 0) {
        // Add new files to selected files
        selectedFiles = [...selectedFiles, ...newFiles];

        // Create a new DataTransfer object
        const dataTransfer = new DataTransfer();

        // Add all files to the DataTransfer object
        selectedFiles.forEach(file => {
          dataTransfer.items.add(file);
        });

        // Update the file input
        imagesInput.files = dataTransfer.files;

        // Trigger change event to refresh previews
        const event = new Event('change', { bubbles: true });
        imagesInput.dispatchEvent(event);

        // Enable remove all button
        removeAllImagesBtn.disabled = false;
      }
    }

    // Remove all images
    if (removeAllImagesBtn) {
      removeAllImagesBtn.addEventListener('click', function() {
        imagesPreviewContainer.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-images"></i>
            <span>No images selected</span>
          </div>
        `;
        imagesInput.value = '';
        selectedFiles = [];
        this.disabled = true;
      });
    }

    // Preview button functionality is now handled in new-post.js
  });
</script>

<%- include('./partials/footer') %>
